[{"content":"はじめに ブログを公開する方法は様々ありますが、 GitHub Pages を使うことで無料で始めることができます。\n無料でブログを公開する場合、{user_name}.github.io といったサブドメインをブログのURLに使用することになります。HTTPSへの対応も自動で行うことができ大変便利なのですが、ひとつ問題があります。\nそれは、Google AdSense での収益化ができない点です。Google AdSense はサブドメインでの申請はできないため、自分で取得したドメインを使ってブログを公開しなければなりません。\nこの記事では Xserver Domain を使ってドメインを取得し、GitHub Pages のブログにカスタムドメインを設定する方法を紹介します。\nちなみに、このブログも Xserver Domain で取得したドメインを使用して、GihHub Pages でサイトを公開しています。\n想定読者 GitHub Pages を使ってブログを公開しようとしている人\ngithub.io ドメインでブログを公開している人\nXserver Domain とは まずは Xserver Domainについて紹介します。\nXserver Domain は独自ドメインを取得することができるサービスで、2022年4月現在 .com ドメインを1年間1円で使用する事ができます。（2年目以降の更新料は1298円（税込））\nよく比較対象になるお名前.comは .com ドメインの初回1年間は1円で使用できますが、2年目以降の更新料は1,408円となっていて、 Xserver Domain の方が少々お安くなります。\nまた、ドメインを取得すると Whois にドメイン管理者の情報を公開しなくてはなりません。\n個人情報を全世界に公開することに抵抗がある方は、Whoisの代行公開サービスを使うことで Whois 公開情報を Xserver.inc 名義に設定することができます。\nXserverではこれを無料で利用することができます。\nお名前.comのWhois情報公開代行では年間1,078円かかります。\n私は費用を抑えることを優先して考えたため、Xserver Domain を使用してドメインを取得することにしました。\nドメイン取得から設定まで まずはドメインの取得を行います。\nその後、DNS や GitHub Pages の設定変更を行い、最後に HTTPS 通信に対応するための証明書作成を行います。\n面倒な部分もありますが、手順通りに設定をすることで独自ドメインでサイトを公開し、 HTTPS にも対応できるようになります。\nHTTPS 化することでセキュリティの向上だけでなく、 Google の検索順位の優遇などのメリットもありますので、 HTTPS に対応できるようにしておくことをお勧めします。\nドメインの取得  Xserver Domainのサイトで取得したいドメイン名を入力してドメインの空きを確認してください。\n後の更新料金や汎用性を考えると .com ドメインがおすすめです。\n希望するドメインが空いていることを確認できたら画面の指示に従って、アカウント登録とお支払いを行いドメインを取得してください。 Xserver Domain の管理ページにログインして、取得したドメインが表示されていることを確認してください。 次に Whois情報設定 のタブをクリックして、Whois代理公開設定を ON にします。\nこれで自分自身の個人情報を世界に公開することなく、Xserver 側が代理で Whois に情報を公開してくれます。\n 最後にネームサーバーの設定を行います。\nネームサーバー設定 のタブをクリックして、ドメイン適用先サービスを Xserver Domain にして画面の指示通りに登録してください。\nGitHub Pages でページを公開する場合、 Xserver のレンタルサーバーなどは使用しないためドメインのみの利用となります。\n\nこれで ドメインの取得と初期設定は完了です。  DNS の設定  新しく取得したドメインに来た通信を GitHub Pages に向けるため、DNSレコードの設定を登録します。\nDMSレコード設定 のタブをクリックして、 DNSレコード設定を追加する をクリックしてください。\n  以下の種別 A と AAAA のレコードをDNSに追加します。ホスト名と優先度は特に入力する必要はありません。\nAレコード\n 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  \nAAAAレコード\n 2606:50c0:8000::153 2606:50c0:8001::153 2606:50c0:8002::153 2606:50c0:8003::153  \n最終的には以下の画像のようになっていればOKです。\n※ 詳細はGitHub Pages カスタムドメインの設定の Apexドメインを設定する に記載されています。\n\nこれで DNS の設定は完了です。\nHTTPS に対応するための証明書の取得と設定  無料で証明書を発行するために Xserver SSL のアカウントを作成し、SSL証明書の申し込みを行います。\nブログであれば証明書のブランドは Let's Encrypt で問題ありません。無料ではじめられますので、まずはこれで良いと思います。 指示通りに進めていくと証明書発行時の認証方法を選択する画面になります。 DNS認証 を選択して、表示されたレコードを Xserver Domain の DSNに登録してください。\n DNS に CNAME レコードを追加して、 www サブドメインを利用できるようにします。\nXserver Domain の DNS に 下記のレコードを登録してください。\n※ 詳細はGitHub Pages カスタムドメインの設定の Apexドメインとwwwサブドメイン付きのドメインの設定 に記載されています。\n ホスト名： www.取得したホスト名 種別： CNAME 内容： あなたのGitHubアカウント名.github.io 優先度： 入力不要   最後に GitHub Pages 側に設定を行い、取得したドメインでサイトにアクセスできるようにします。\nGitHub Pages を設定している GitHub リポジトリにアクセスし、Setting、Pages をクリックしてください。\nCustom domain に取得したドメインを入力し、 アクティブになるまで数分待ち時間が発生します。\n画面上部のステータスが緑になったら、Enforce HTTPS にチェックを付けます。\n  これでサイトを Xservr Domain で取得したドメインで公開し、HTTPSにも対応した状態になりました。\n実際にサイトにアクセスして正しく表示されることを確認してください。\nまとめ GitHub Pages で公開するサイトを独自ドメインをつかって HTTPS で公開する方法を記載しました。\nXserver Domain や Xserver SSL を使ってドメイン取得や証明書取得をする方法について、中々記事が見つからなかったので自分で記事を書いてみました。\nこの方法で実現することで格安でサイトを公開することができます。\n専門知識が必要なところなので悩んでいる方がいましたら参考になると幸いです。\n","description":"Xserver Domain を使ってドメインを取得し、GitHub Pages のブログにカスタムドメインを設定する方法を紹介します。また、 HTTPS に対応するために Xserver SSL を使用して Let's Encrypt の証明書を取得します。","id":0,"section":"posts","tags":["GitHub Pages","ブログ作成","Xserver","HTTPS"],"title":"Xserver Domain で取得したドメインを使って GitHub Pages で HTTPS に対応したサイトを公開する方法","uri":"https://y-ktzw.com/posts/custom-domain/"},{"content":"はじめに 冪等性についてご存知でしょうか。\n最近RESTfulAPIの設計を行うことがあり、色々と調べて知見を得たので記事にまとめました。\nこの記事では冪等性についての説明から、RESTfulAPIでの具体的な冪等性の設計手法を説明します。\n読んだ方のAPI設計の悩みが1つでも解消できれば幸いです。\n想定読者 この記事はRESTfulAPIの設計や実装に関わっているが冪等性について詳しくない人を対象にしています。\nこの記事を呼んで \u0026ldquo;冪等性を完全に理解した（※1）\u0026rdquo; 状態になることを目指して書きました。\n冪等性とは 冪等性とは同じ操作を何回繰り返しても同じ結果が得られるということを言います。\n例えばテレビのリモコンの\u0026quot;1\u0026quot;ボタンは冪等性があると言えます。\n\u0026ldquo;1\u0026quot;を押すと1チャンネルに切り替わりますが、その時点でもう一度\u0026quot;1\u0026quot;ボタンを押しても1チャンネルのままです。つまり、\u0026ldquo;1\u0026quot;ボタンを何度押しても\u0026quot;1チャンネルを表示する\u0026quot;という結果は変わらないので冪等と言えます。\n逆に冪等性が無い状態というのは、同じ操作を繰り返した際に結果が異なる場合を言います。\n例えばテレビのリモコンの電源ボタンは冪等性がありません。\nテレビがついていない状態で電源ボタンを押すとテレビが付きますが、もう一度押すと今度は消えてしまいます。同じ操作を繰り返し行った際に結果が異なるので冪等とは言えません。\nRESTfulAPIにおける冪等性 RESTfulAPIにおける冪等性は、何度APIを呼び出しても結果が常に同じ（リソースの状態が変わらない）ことを言います。\nIdempontent REST APIsによると、REST原則に従って設計すれば、HTTPメソッドよって冪等性があるか、そうでないかを分類することができます。\n POST は冪等ではありません。 GET, PUT, DELETE, HEAD, OPTIONS, TRACE は冪等です。  \nPOSTは通常新しいリソースを作成するために使用します。\nPOSTリクエストを同じ内容で10回呼び出せば、10個のリソースが作成されることになります。よって、POSTには冪等性がありません。\nGET, HEAD, OPTIONS, TRACE はリソースを取得する処理なので、リソースの更新を一切行わないことから冪等といえます。\nPUT, DELETEはリソースの更新を行いますが、何度同じリクエストを送っても更新結果は変わりません。なので、こちらも冪等といえます。\nこの記事にはPATCHについて言及されていませんが、APIの実装により冪等である場合もあるし、冪等でない場合もあることだと私は認識しています。\nいずれせよ、PATCHの場合もPOSTと同じように後述する冪等性を担保する設計を行えば冪等性を担保することができます。\nなぜ冪等性が必要なのか インターネットを経由した通信では、しばしば途中で通信エラーが発生してレスポンスが受け取れないケースが発生することがあります。\nレスポンスが受け取れない場合、送ったリクエストが正しく処理されたか判断できないため、リトライ処理を行う必要があります。\n冪等性の無いAPI（例えばPOSTメソッド）の場合、何も考えずにリクエストを送り直すとリソースが重複して登録されてしまう可能性があります。\nその場合、サーバー側のリソースの状況を取得するAPIを呼び出すなど再度リクエストを送って問題ないかチェックしてからリトライを行う必要があり、通信エラー発生時のリトライ処理が煩雑になってしまいます。\n冪等性のあるAPIの場合は改めてリクエストを送り直すだけでこの問題を解決することができます。\nまた、通信エラー以外にも一時的なエラーの場合は同様にリトライ処理で解決することができます。\n冪等性のあるAPIを設計する 冪等性が無いとされているPOSTメソッドで冪等性を担保するための方法を説明します。\n冪等性を担保するために呼び出し元から \u0026ldquo;冪等性キー\u0026rdquo; をリクエストに渡します。\nAPIを提供するサーバー側では \u0026ldquo;冪等性キー\u0026rdquo; を受け取り、冪等性キーの値が既に処理済みであるかチェックを行います。\nこれまで処理したことの無い \u0026ldquo;冪等性キー\u0026rdquo; であれば、リソース作成処理を行い、処理済みの \u0026ldquo;冪等性キー\u0026rdquo; としてストレージに登録します。\n処理済みの \u0026ldquo;冪等性キー\u0026rdquo; であれば、リソース作成処理を行わずに終了します。\nこのような実装にすることで、同じ \u0026ldquo;冪等性キー\u0026rdquo; で何度呼び出しても1つのリソースしか作成されなくなり、冪等であると言える状態を作ることができます。\n具体的な設計方針 2022年4月現在、決定的な推奨方法は無いようですが、ここでは \u0026ldquo;Idempotency-Key Header\u0026rdquo; を利用する方法を紹介します。\nこれは上記で説明した \u0026ldquo;冪等性キー\u0026rdquo; を HTTP Header に渡す方法です。\n呼び出し元のクライアントで UUID を採番し、それを HTTP Header の \u0026ldquo;Idempotency-Key\u0026rdquo; に渡すことで冪等性を担保します。\n ユーザー登録APIの例  URL: https://{your_domain}/users Method: POST Header: Idempotency-Key={採番したUUID} Body: \u0026ldquo;{user_id:12345, user_name:Tom}\u0026rdquo;    \nこの方法は2021年11月にIETFに提案されたようですが、採用されることはなく2022年1月に有効期限を迎えてしまいました。\n（Idempotency-Key Headerの現状・仕様・実装の理解を助けるリソースまとめを参考にさせていただきました。）\nHTTP Headerに指定する方法以外にもリクエストボディに同様の冪等性キーを指定することで、冪等性を担保することもできます。\n推奨される方法はないため、プロダクトに合った方法で実装すれば良いと思います。\nまとめ 冪等性のあるRESTfulAPIについて紹介しました。\nPOSTメソッドでの冪等性の担保はそれほど高いコストをかけること無く実装することができると思います。\n呼び出すクライアント側のリトライ処理が格段に楽になりますので、冪等性の担保について検討してみてはいかがでしょうか。\n読んだ方のAPI設計の悩みが1つでも解消できれば幸いです。\n参考記事 冪等と安全に関する誤解\nIdempontent REST APIs\nIdempotency-Key Headerの現状・仕様・実装の理解を助けるリソースまとめ\n注釈 ※1 : 完全に理解した → 製品を利用するためのチュートリアルを完了できたという意味。\n","description":"冪等性についての説明から、RESTfulAPIでの具体的な冪等性の設計手法を説明します。","id":1,"section":"posts","tags":["RESTfulAPI","設計","サーバーサイド"],"title":"RESTfulAPIにおける冪等性の担保","uri":"https://y-ktzw.com/posts/idempotent-api/"}]