<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>posts on ktzwのエンジニアブログ</title><link>https://y-ktzw.com/posts/</link><description>Recent content in posts on ktzwのエンジニアブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>©2023, All Rights Reserved</copyright><lastBuildDate>Sun, 27 Mar 2022 23:20:00 +0900</lastBuildDate><atom:link href="https://y-ktzw.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>権限設計表による意思決定権の明確化</title><link>https://y-ktzw.com/posts/role-design/</link><pubDate>Mon, 09 Oct 2023 16:10:00 +0900</pubDate><atom:modified>Mon, 09 Oct 2023 16:10:00 +0900</atom:modified><guid>https://y-ktzw.com/posts/role-design/</guid><description>はじめに 最近、チームで権限設計表を作成しましたので紹介します。
私のチームは10人未満のプロダクトチームで、リーダーに依存せずに主体的に仕事を進められる「自走するチーム」を目指しています。
自走するチームを目指す中で誰が意思決定権を持っているのか不明瞭だと、「誰の承認を取ればいいのかわからない」「自己判断で進行していたが上長の承認が必要だった」など意思決定による問題で業務が停滞したり手戻りが発生してしまうことがあります。
これらの問題を最小限に抑えるために、私のチームでは権限設計表を作成して運用しています。
なぜ権限設計表が必要なのか 組織の意思決定権を明確にすることで、誰の承認を取ればいいのかで迷うことがなくなり、業務効率化に寄与することができます。
また、意思決定者が明確になっていることで、意思決定者に承認を求める際の心理的ハードルも下がるという効果もあります。
作り方 業務に関係するロールを洗い出して表の列にします。
次に意思決定が必要な業務を洗い出して表の行にします。このときにカテゴリー分けをしておくと後で見やすいと思います。
ちなみに、業務の洗い出しは完璧である必要はありません。業務内容は状況によって変化するので足りないものがあれば都度見直しを行えば良いです。
ロールと業務の洗い出しが終わったら意思決定権を持つ人をマークします。権限設計表の作成はこれだけです。
チームの規模によると思いますが、1~3時間程度あれば十分完成できると思います。
権限設計表のサンプル 業務 マネージャー チームリーダー テックリード チームメンバー KPI・KGI ● 案件スケジュール ● システムアーキテクチャの変更 ● 問い合わせに対する既存仕様の回答 ● 問い合わせに対する仕様変更の関わる回答 ● プルリクエストの承認 ● 運用方法 権限設計表を作成したら関係者全員と認識合わせを行います。</description><dc:creator>ktzw</dc:creator><media:content url="https://y-ktzw.comimages/card/role-design.png" medium="image"><media:title type="html">featured image</media:title></media:content><media:content url="https://y-ktzw.comimages/card/role-design.png" medium="image"><media:title type="html">meta image</media:title></media:content><category>チームづくり</category><category>業務効率化</category></item><item><title>Xserver Domain で取得したドメインを使って GitHub Pages で HTTPS に対応したサイトを公開する方法</title><link>https://y-ktzw.com/posts/custom-domain/</link><pubDate>Sun, 17 Apr 2022 21:30:00 +0900</pubDate><atom:modified>Sun, 17 Apr 2022 21:30:00 +0900</atom:modified><guid>https://y-ktzw.com/posts/custom-domain/</guid><description>はじめに ブログを公開する方法は様々ありますが、 GitHub Pages を使うことで無料で始めることができます。
無料でブログを公開する場合、{user_name}.github.io といったサブドメインをブログのURLに使用することになります。HTTPSへの対応も自動で行うことができ大変便利なのですが、ひとつ問題があります。
それは、Google AdSense での収益化ができない点です。Google AdSense はサブドメインでの申請はできないため、自分で取得したドメインを使ってブログを公開しなければなりません。
この記事では Xserver Domain を使ってドメインを取得し、GitHub Pages のブログにカスタムドメインを設定する方法を紹介します。
ちなみに、このブログも Xserver Domain で取得したドメインを使用して、GihHub Pages でサイトを公開しています。
想定読者 GitHub Pages を使ってブログを公開しようとしている人
github.io ドメインでブログを公開している人
Xserver Domain とは まずは Xserver Domainについて紹介します。
Xserver Domain は独自ドメインを取得することができるサービスで、2022年4月現在 .com ドメインを1年間1円で使用する事ができます。（2年目以降の更新料は1298円（税込））
よく比較対象になるお名前.comは .com ドメインの初回1年間は1円で使用できますが、2年目以降の更新料は1,408円となっていて、 Xserver Domain の方が少々お安くなります。
また、ドメインを取得すると Whois にドメイン管理者の情報を公開しなくてはなりません。
個人情報を全世界に公開することに抵抗がある方は、Whoisの代行公開サービスを使うことで Whois 公開情報を Xserver.inc 名義に設定することができます。
Xserverではこれを無料で利用することができます。
お名前.comのWhois情報公開代行では年間1,078円かかります。
私は費用を抑えることを優先して考えたため、Xserver Domain を使用してドメインを取得することにしました。
ドメイン取得から設定まで まずはドメインの取得を行います。
その後、DNS や GitHub Pages の設定変更を行い、最後に HTTPS 通信に対応するための証明書作成を行います。
面倒な部分もありますが、手順通りに設定をすることで独自ドメインでサイトを公開し、 HTTPS にも対応できるようになります。</description><dc:creator>ktzw</dc:creator><media:content url="https://y-ktzw.comimages/card/custom-domain.png" medium="image"><media:title type="html">featured image</media:title></media:content><media:content url="https://y-ktzw.comimages/card/custom-domain.png" medium="image"><media:title type="html">meta image</media:title></media:content><category>GitHub Pages</category><category>ブログ作成</category><category>Xserver</category><category>HTTPS</category></item><item><title>RESTfulAPIにおける冪等性の担保</title><link>https://y-ktzw.com/posts/idempotent-api/</link><pubDate>Thu, 31 Mar 2022 00:45:00 +0900</pubDate><atom:modified>Thu, 31 Mar 2022 00:45:00 +0900</atom:modified><guid>https://y-ktzw.com/posts/idempotent-api/</guid><description>はじめに 冪等性についてご存知でしょうか。
最近RESTfulAPIの設計を行うことがあり、色々と調べて知見を得たので記事にまとめました。
この記事では冪等性についての説明から、RESTfulAPIでの具体的な冪等性の設計手法を説明します。
読んだ方のAPI設計の悩みが1つでも解消できれば幸いです。
想定読者 この記事はRESTfulAPIの設計や実装に関わっているが冪等性について詳しくない人を対象にしています。
この記事を呼んで &amp;ldquo;冪等性を完全に理解した（※1）&amp;rdquo; 状態になることを目指して書きました。
冪等性とは 冪等性とは同じ操作を何回繰り返しても同じ結果が得られるということを言います。
例えばテレビのリモコンの&amp;quot;1&amp;quot;ボタンは冪等性があると言えます。
&amp;ldquo;1&amp;quot;を押すと1チャンネルに切り替わりますが、その時点でもう一度&amp;quot;1&amp;quot;ボタンを押しても1チャンネルのままです。つまり、&amp;ldquo;1&amp;quot;ボタンを何度押しても&amp;quot;1チャンネルを表示する&amp;quot;という結果は変わらないので冪等と言えます。
逆に冪等性が無い状態というのは、同じ操作を繰り返した際に結果が異なる場合を言います。
例えばテレビのリモコンの電源ボタンは冪等性がありません。
テレビがついていない状態で電源ボタンを押すとテレビが付きますが、もう一度押すと今度は消えてしまいます。同じ操作を繰り返し行った際に結果が異なるので冪等とは言えません。
RESTfulAPIにおける冪等性 RESTfulAPIにおける冪等性は、何度APIを呼び出しても結果が常に同じ（リソースの状態が変わらない）ことを言います。
Idempontent REST APIsによると、REST原則に従って設計すれば、HTTPメソッドよって冪等性があるか、そうでないかを分類することができます。
POST は冪等ではありません。 GET, PUT, DELETE, HEAD, OPTIONS, TRACE は冪等です。
POSTは通常新しいリソースを作成するために使用します。
POSTリクエストを同じ内容で10回呼び出せば、10個のリソースが作成されることになります。よって、POSTには冪等性がありません。
GET, HEAD, OPTIONS, TRACE はリソースを取得する処理なので、リソースの更新を一切行わないことから冪等といえます。
PUT, DELETEはリソースの更新を行いますが、何度同じリクエストを送っても更新結果は変わりません。なので、こちらも冪等といえます。
この記事にはPATCHについて言及されていませんが、APIの実装により冪等である場合もあるし、冪等でない場合もあることだと私は認識しています。
いずれせよ、PATCHの場合もPOSTと同じように後述する冪等性を担保する設計を行えば冪等性を担保することができます。
なぜ冪等性が必要なのか インターネットを経由した通信では、しばしば途中で通信エラーが発生してレスポンスが受け取れないケースが発生することがあります。
レスポンスが受け取れない場合、送ったリクエストが正しく処理されたか判断できないため、リトライ処理を行う必要があります。
冪等性の無いAPI（例えばPOSTメソッド）の場合、何も考えずにリクエストを送り直すとリソースが重複して登録されてしまう可能性があります。
その場合、サーバー側のリソースの状況を取得するAPIを呼び出すなど再度リクエストを送って問題ないかチェックしてからリトライを行う必要があり、通信エラー発生時のリトライ処理が煩雑になってしまいます。
冪等性のあるAPIの場合は改めてリクエストを送り直すだけでこの問題を解決することができます。
また、通信エラー以外にも一時的なエラーの場合は同様にリトライ処理で解決することができます。
冪等性のあるAPIを設計する 冪等性が無いとされているPOSTメソッドで冪等性を担保するための方法を説明します。
冪等性を担保するために呼び出し元から &amp;ldquo;冪等性キー&amp;rdquo; をリクエストに渡します。
APIを提供するサーバー側では &amp;ldquo;冪等性キー&amp;rdquo; を受け取り、冪等性キーの値が既に処理済みであるかチェックを行います。
これまで処理したことの無い &amp;ldquo;冪等性キー&amp;rdquo; であれば、リソース作成処理を行い、処理済みの &amp;ldquo;冪等性キー&amp;rdquo; としてストレージに登録します。
処理済みの &amp;ldquo;冪等性キー&amp;rdquo; であれば、リソース作成処理を行わずに終了します。
このような実装にすることで、同じ &amp;ldquo;冪等性キー&amp;rdquo; で何度呼び出しても1つのリソースしか作成されなくなり、冪等であると言える状態を作ることができます。</description><dc:creator>ktzw</dc:creator><media:content url="https://y-ktzw.comimages/card/idempotent-api.png" medium="image"><media:title type="html">featured image</media:title></media:content><media:content url="https://y-ktzw.comimages/card/idempotent-api.png" medium="image"><media:title type="html">meta image</media:title></media:content><category>RESTfulAPI</category><category>設計</category><category>サーバーサイド</category></item></channel></rss>